/*
Copyright 2017 Svante Schubert

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
package com.github.gumtreediff.gen.antlr4.msv;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.antlr.v4.misc.OrderedHashMap;
import org.antlr.v4.runtime.tree.TerminalNode;

public class MSVFileMapper extends MSVParserBaseListener {

    public static final Map<String, String> props = new OrderedHashMap<String, String>();
    private int lastDepth = -1;
    BufferedWriter bufferedWriter = null;
    private static final String START = "//Generated by the 'MsvGrammarTest'" +
"\npackage com.github.gumtreediff.gen.antlr4.msv;\n" +
"\n" +
"import java.io.File;\n" +
"import java.io.FileNotFoundException;\n" +
"import java.io.FileOutputStream;\n" +
"import java.io.IOException;\n" +
"import java.io.OutputStream;\n" +
"import java.util.logging.Level;\n" +
"import java.util.logging.Logger;\n" +
"import org.apache.tinkerpop.gremlin.structure.T;\n" +
"import org.apache.tinkerpop.gremlin.structure.Vertex;\n" +
"import org.apache.tinkerpop.gremlin.structure.io.IoCore;\n" +
"import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;\n" +
"\n" +
"public class ODFSchemaGraph {\n" +
"\n" +
"    private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger(ODFSchemaGraph.class.getName());\n" +
"\n" +
"    // see http://tinkerpop.apache.org/docs/current/reference/#_the_graph_structure\n" +
"    public static void main(String[] args) {\n" +
"\n" +
"        TinkerGraph graph = TinkerGraph.open();\n" +
"// START\n";

    private static final String END = "// END\n" +
"        try (final OutputStream os = new FileOutputStream(\"build\"  + File.separatorChar + \"odf12-graph.xml\")) {\n" +
"            graph.io(IoCore.graphml()).writer().normalize(true).create().writeGraph(os, graph);\n" +
"        } catch (FileNotFoundException ex) {\n" +
"            Logger.getLogger(ODFSchemaGraph.class.getName()).log(Level.SEVERE, null, ex);\n" +
"        } catch (IOException ex) {\n" +
"            Logger.getLogger(ODFSchemaGraph.class.getName()).log(Level.SEVERE, null, ex);\n" +
"        }\n" +
"    }\n" +
"}";

     private static final Map<Integer, String> lastVertexOnGraphLevel = new HashMap<Integer, String>();
     private static String parentName = null;
     private static int vertixCount = 0;

    MSVFileMapper(String outputFilePath) {
        super();
        try {
            bufferedWriter = new BufferedWriter(new FileWriter(outputFilePath));
            bufferedWriter.write(START);
        } catch (IOException ex) {
            Logger.getLogger(MSVFileMapper.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void exitMsvLine(MSVParser.MsvLineContext ctx) {
        String vertexName = null;
        int depth = Integer.parseInt(ctx.GraphNodeDepth().getText());

        // node name
        vertexName = "v" + vertixCount;

        // Save the node as last node of this level
        lastVertexOnGraphLevel.put(depth, vertexName);

        // if we jump to a previous node..
        if(depth < lastDepth){
            // receive the previous parent
            parentName = lastVertexOnGraphLevel.get(depth);
        }

        // Restore last note of that level as parent
        // Create relation to parent vertix
        String label = ctx.GraphNodeType().getText();

//        Vertex marko = graph.addVertex(T.label, "person", T.id, 1, "name", "marko", "age", 29);
//        marko.addEdge("knows", vadas, T.id, 7, "weight", 0.5f);
//
        String value = null;
        List<TerminalNode> values = ctx.EscapedString();
        if (values != null && values.size() == 1) {
            String escapedValue = values.get(0).getText();
            value = escapedValue.substring(1, escapedValue.length() - 1);
        }
        String valueString;
        if(value == null){
            valueString = "";
        }else{
            valueString = ", \"is\", \"" + value + "\"";
        }

        writeln("        Vertex " + vertexName + " = graph.addVertex(T.label, \"" + label + "\"" + valueString + ");");
        if(parentName != null){
            writeln("        " + parentName + ".addEdge(\"hasChild\", " + vertexName + ");");
        }
        parentName = vertexName;
        vertixCount++;

//        props.put(id, value);
    }
    private static final Logger LOG = Logger.getLogger(MSVFileMapper.class.getName());

    private void writeln(String s) {
        write(s + "\n");
    }

    private void write(String s) {
        try {
            bufferedWriter.write(s);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void close() {
        try {
            if (bufferedWriter != null) {
                bufferedWriter.write(END);
                bufferedWriter.flush();
                bufferedWriter.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bufferedWriter != null) {
                    bufferedWriter.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
